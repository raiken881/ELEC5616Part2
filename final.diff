diff --git a/bot.py b/bot.py
index cd5cdba..f471239 100644
--- a/bot.py
+++ b/bot.py
@@ -6,11 +6,13 @@ from lib.evil import bitcoin_mine, harvest_user_pass
 from lib.p2p import find_bot, bot_server
 from lib.files import download_from_pastebot, filestore, p2p_upload_file, save_valuable, upload_valuables_to_pastebot, valuables
 
+
 def p2p_upload(fn):
     sconn = find_bot()
     sconn.send(bytes("FILE", "ascii"))
     p2p_upload_file(sconn, fn)
 
+
 def p2p_echo():
     try:
         sconn = find_bot()
@@ -21,8 +23,10 @@ def p2p_echo():
             # Read a message and send it to the other bot
             msg = input("Echo> ")
             byte_msg = bytes(msg, "ascii")
+
             sconn.send(byte_msg)
             # This other bot should echo it back to us
+
             echo = sconn.recv()
             # Ensure that what we sent is what we got back
             assert(echo == byte_msg)
@@ -31,7 +35,7 @@ def p2p_echo():
                 sconn.close()
                 break
     except socket.error:
-        print("Connection closed unexpectedly")
+        print("Connection closed unexpectedly. This was caused either because the MACS were different or an error occured")
 
 if __name__ == "__main__":
     # Start a new thread to accept P2P echo or P2P upload requests
diff --git a/dh/__init__.py b/dh/__init__.py
index 6d6f182..0818b37 100644
--- a/dh/__init__.py
+++ b/dh/__init__.py
@@ -1,7 +1,8 @@
 from Crypto.Hash import SHA256
+from lib.helpers import read_hex
 from Crypto.Random import random
 
-from lib.helpers import read_hex
+
 
 # Project TODO: Is this the best choice of prime? Why? Why not? Feel free to replace!
 
@@ -18,23 +19,41 @@ C2007CB8 A163BF05 98DA4836 1C55D39A 69163FA8 FD24CF5F
 # Convert from the value supplied in the RFC to an integer
 prime = read_hex(raw_prime)
 
+predefined_g = 2
+publicKey = 0
+shared_secret = 0
 # Project TODO: write the appropriate code to perform DH key exchange
 
+
 def create_dh_key():
     # Creates a Diffie-Hellman key
-    # Returns (public, private)
-    a = random.randint(0, int(2**8))
-    return (a, a)
+    privateKey = generatePriKey()
+    publicKey = generatePubKey(privateKey)
+    return (publicKey, privateKey)
+
 
 def calculate_dh_secret(their_public, my_private):
     # Calculate the shared secret
-    shared_secret = their_public * my_private
+    # shared_secret = pow(their_public,my_private,prime);
+    shared_secret = pow(their_public,my_private,prime)
 
     # Hash the value so that:
     # (a) There's no bias in the bits of the output
-    #     (there may be bias if the shared secret is used raw)
+    # (there may be bias if the shared secret is used raw)
     # (b) We can convert to raw bytes easily
     # (c) We could add additional information if we wanted
     # Feel free to change SHA256 to a different value if more appropriate
-    shared_hash = SHA256.new(bytes(shared_secret, "ascii")).hexdigest()
+    shared_hash_string = str(shared_secret)
+    shared_hash_string = shared_hash_string.encode("ascii")
+    shared_hash = SHA256.new(shared_hash_string).hexdigest()
     return shared_hash
+
+
+def generatePriKey():
+    return random.randint(2, prime - 1)
+
+
+def generatePubKey(secretKey):
+    return pow(predefined_g, secretKey, prime)
+
+
diff --git a/lib/comms.py b/lib/comms.py
index 3ed42bd..6fb00c1 100644
--- a/lib/comms.py
+++ b/lib/comms.py
@@ -1,23 +1,42 @@
 import struct
-
-from Crypto.Cipher import XOR
-
+from Crypto import Random
+from Crypto.Random import random
+import hmac
+import hashlib
+import base64
+import datetime
+from Crypto.Cipher import AES
+from Crypto.Hash import HMAC
+from Crypto.Hash import SHA256
 from dh import create_dh_key, calculate_dh_secret
 
+
 class StealthConn(object):
     def __init__(self, conn, client=False, server=False, verbose=False):
         self.conn = conn
-        self.cipher = None
+        self.keyExhangePerformed = False
         self.client = client
         self.server = server
         self.verbose = verbose
+        self.shared_hash = None
+        self.mac = None
+        self.counter = None
+        self.receivedCounter = None
         self.initiate_session()
 
     def initiate_session(self):
         # Perform the initial connection handshake for agreeing on a shared secret
-
-        ### TODO: Your code here!
+        # TODO: Your code here!
         # This can be broken into code run just on the server or just on the client
+
+        # To avoid random number generated on the server and the client to coincide(if it happens), we choose different
+        # range of integers
+        if self.server:
+            self.counter = random.randint(0, 10000000)
+
+        if self.client:
+            self.counter = random.randint(11000000, 50000000)
+
         if self.server or self.client:
             my_public_key, my_private_key = create_dh_key()
             # Send them our public key
@@ -25,36 +44,85 @@ class StealthConn(object):
             # Receive their public key
             their_public_key = int(self.recv())
             # Obtain our shared secret
-            shared_hash = calculate_dh_secret(their_public_key, my_private_key)
-            print("Shared hash: {}".format(shared_hash))
+            self.shared_hash = calculate_dh_secret(their_public_key, my_private_key)
 
-        # Default XOR algorithm can only take a key of length 32
-        self.cipher = XOR.new(shared_hash[:4])
+        self.keyExhangePerformed = True
 
     def send(self, data):
-        if self.cipher:
-            encrypted_data = self.cipher.encrypt(data)
-            if self.verbose:
-                print("Original data: {}".format(data))
-                print("Encrypted data: {}".format(repr(encrypted_data)))
-                print("Sending packet of length {}".format(len(encrypted_data)))
+
+        # Encrypt the message along with the counter and send the computed HMAC along with the message
+        # THe key for encryption is half of the shared secret and the other half is used for the HMAC generation
+        # Message is sent in the form "encryptedData,HMAC!"
+        if self.keyExhangePerformed:
+            keyForEncryption = self.shared_hash[:int(len(self.shared_hash)/2)]
+            encrypted_data = self.encryptUsingBlockCipher(data, bytes(keyForEncryption, "ascii"))
+            keyForHMAC = self.shared_hash[int(len(self.shared_hash)/2) + 1 :]
+            messageAuthCode = self.computeMAC(bytes(keyForHMAC, "ascii"), encrypted_data)
+            encrypted_data = encrypted_data + bytes(',', "ascii") + bytes(messageAuthCode, "ascii") + bytes('!', "ascii")
+            self.counter += 1
+
+        if self.verbose:
+            print("Original data: {}".format(data))
+            print("Encrypted data: {}".format(repr(encrypted_data)))
+            print("Sending packet of length {}".format(len(encrypted_data)))
         else:
             encrypted_data = data
 
         # Encode the data's length into an unsigned two byte int ('H')
+        # Break down the message into n messages depending on the length of the message
         pkt_len = struct.pack('H', len(encrypted_data))
         self.conn.sendall(pkt_len)
         self.conn.sendall(encrypted_data)
 
     def recv(self):
+
         # Decode the data's length from an unsigned two byte int ('H')
         pkt_len_packed = self.conn.recv(struct.calcsize('H'))
         unpacked_contents = struct.unpack('H', pkt_len_packed)
         pkt_len = unpacked_contents[0]
-
         encrypted_data = self.conn.recv(pkt_len)
-        if self.cipher:
-            data = self.cipher.decrypt(encrypted_data)
+
+        if self.keyExhangePerformed:
+            # Extract the message code and the encrypted data from the received data
+            # Half of the shared secret is used for decryption and the other half for HMAC generation
+            keyForDecryption = self.shared_hash[:int(len(self.shared_hash) / 2)]
+            indexOfDelim = self.findDelimiter(encrypted_data, ',')
+            data = encrypted_data[0:indexOfDelim]
+            indexOfMessageEnd = self.findDelimiter(encrypted_data, '!')
+            keyForHMAC = self.shared_hash[int(len(self.shared_hash) / 2) + 1:]
+            messageAuthCode = encrypted_data[indexOfDelim + 1: indexOfMessageEnd]
+            receiverMessageCode = bytes(self.computeMAC(bytes(keyForHMAC, "ascii"), data),"ascii")
+            data = self.decryptMessage(data, keyForDecryption)
+
+            # Extract the counter from the decrypted data
+            indexOfDelim = self.findDelimiter(data, ',')
+            delimOfPad = self.findDelimiter(data, '!')
+            counter = int(data[indexOfDelim + 1:delimOfPad])
+            data = data[:indexOfDelim]
+
+            # If we are in the server then check the client's counter sent against saved counter. If the counter is less
+            # Then a replay attack is being performed and we just abort the current communication
+            if self.server:
+                if self.receivedCounter is None:
+                    self.receivedCounter = counter
+
+                if not(self.compareCounter(counter, self.receivedCounter)):
+                    print("Packet has already been seen. Good try but this packet will be rejected")
+                    self.conn.close()
+
+            if self.client:
+                if self.receivedCounter is None:
+                    self.receivedCounter = counter
+
+                if not(self.compareCounter(counter, self.receivedCounter)):
+                    print("Packet has already been seen. Good try but this packet will be rejected")
+                    self.conn.close()
+
+            # If HMAC differs then stop
+            if not(self.compareMAC(messageAuthCode, receiverMessageCode)):
+                print("MACs aren't similar. I'm going to kill the connection now... Bye!")
+                self.conn.close()
+
             if self.verbose:
                 print("Receiving packet of length {}".format(pkt_len))
                 print("Encrypted data: {}".format(repr(encrypted_data)))
@@ -66,3 +134,106 @@ class StealthConn(object):
 
     def close(self):
         self.conn.close()
+
+    # Return the computed HMAC with an output length of 32 bytes(256 bits)
+    def computeMAC(self, key, message):
+        MAC = HMAC.new(key,message,SHA256)
+        return MAC.hexdigest()[:32]
+
+    # If the key length is > 32 then get the first 32 bytes of the key(since the block cipher accept keys of only 32 bytes
+    # long max). Create an initialisation vector which is a random byte string generated using pycrypto random function
+    # Encrypt message with shared secret using block cipher in CFB mode and add the initialisation vector to it
+    # Then encode the result in base 64 with a padding in case a padding error occurs
+    def encryptUsingBlockCipher(self, message, key):
+
+        if len(key) > 32:
+            key = key[0:32]
+
+        initialvector = Random.new().read(AES.block_size)
+        encryptionAES = AES.new(key, AES.MODE_CBC, initialvector)
+        messageToPad = message+ bytes(',',"ascii") + bytes(str(self.counter), "ascii")
+        encryptedMessage = initialvector + encryptionAES.encrypt(self.padMessageToBeEncrypted(messageToPad))
+        return self.padInput(base64.b64encode(encryptedMessage))
+
+
+    # Same logic as the encrypter. If the key length is > 32 then take only the first 32 bytes. Since the encrypted message
+    # is encoded in base 64, decode it first using the base 64 method and then use AES CFB mode block cipher to decrypt
+    # the message with the initialisation vector extracted from the message.
+    # NOTE: we know which one is the initialisation vector in the message as the AES.blocksize is used(16 bytes).
+    def decryptMessage(self,message,secretKey):
+
+        if len(secretKey) > 32:
+            secretKey = secretKey[0:32]
+
+        decodedMessage = base64.b64decode(message)
+        initialVector = decodedMessage[:16]
+        aesDecrypter = AES.new(secretKey, AES.MODE_CBC, initialVector)
+        decryptMessage = aesDecrypter.decrypt(decodedMessage[16:])
+
+        return decryptMessage
+
+    # Find the delimiter in the given string
+    def findDelimiter(self, data, delimiter):
+        delimiterCode = bytes(delimiter, "ascii")[0]
+        for x in range(0, len(data)):
+            if data[x] == delimiterCode:
+                return x
+
+    # If the input is not a multiple of base64 acceptable length then pad it else some decoding error might occur
+    def padInput(self, inputToBePadded):
+        multipleOfb64 = 4
+        missingBytes = len(inputToBePadded) % multipleOfb64
+
+        if missingBytes > 0:
+            for x in range(0, missingBytes):
+                inputToBePadded += bytes('=', "ascii")
+
+        else:
+            for x in range(0, multipleOfb64):
+                inputToBePadded += bytes('=', "ascii")
+
+        return inputToBePadded
+
+    # compare the hexdigest of the 2 MACS
+    def compareMAC(self, senderMessageCode, recieverMessageCode):
+
+        return senderMessageCode == recieverMessageCode
+
+    # Compare the counters. If the counter on the receiver side is greater than the received counter then it means
+    # that the packet has been replayed
+    def compareCounter(self,senderCounter,receiverCounter):
+
+        if receiverCounter > senderCounter:
+            return False
+
+        if receiverCounter < senderCounter:
+            return True
+
+        return True
+
+    # Pad the message for CBC mode such that the message is a factor of 16 in length
+    def padMessageToBeEncrypted(self,message):
+        # Length of message for CBC to accept it
+        multipleOfCBC = 16
+
+        missingBytes = len(message) % multipleOfCBC
+        if len(message) > multipleOfCBC:
+            if missingBytes != 0:
+
+                for x in range(0, multipleOfCBC):
+                    message += bytes(str('!'), "ascii")
+                    if len(message) % multipleOfCBC == 0:
+                        break
+
+        else:
+            missingBytes = multipleOfCBC - missingBytes
+
+            for x in range(0,missingBytes):
+                message += bytes(str('!'), "ascii")
+
+        return message
+
+
+
+
+
diff --git a/lib/evil.py b/lib/evil.py
index 3fe5e5b..a8e5486 100644
--- a/lib/evil.py
+++ b/lib/evil.py
@@ -5,6 +5,7 @@ import time
 
 from lib.helpers import generate_random_string
 
+
 def bitcoin_mine():
     frames = "\\|/-"
     for i in range(8):
@@ -14,6 +15,7 @@ def bitcoin_mine():
     # Bitcoin addresses start with a 3 or 1
     return random.choice("13") + generate_random_string(length=30)
 
+
 def harvest_user_pass():
     names = "Bob Tim Ben Adam Lois Julie Daniel Lucy Sam Stephen Matt Luke Jenny Becca".split()
     return random.choice(names), generate_random_string(length=10)
diff --git a/lib/files.py b/lib/files.py
index 55a803f..7efe37d 100644
--- a/lib/files.py
+++ b/lib/files.py
@@ -8,13 +8,16 @@ valuables = []
 
 ###
 
+
 def save_valuable(data):
     valuables.append(data)
 
+
 def encrypt_for_master(data):
     # Encrypt the file so it can only be read by the bot master
     return data
 
+
 def upload_valuables_to_pastebot(fn):
     # Encrypt the valuables so only the bot master can read them
     valuable_data = "\n".join(valuables)
@@ -30,6 +33,7 @@ def upload_valuables_to_pastebot(fn):
 
 ###
 
+
 def verify_file(f):
     # Verify the file was sent by the bot master
     # TODO: For Part 2, you'll use public key crypto here
@@ -40,6 +44,7 @@ def verify_file(f):
         return True
     return False
 
+
 def process_file(fn, f):
     if verify_file(f):
         # If it was, store it unmodified
@@ -50,6 +55,7 @@ def process_file(fn, f):
     else:
         print("The file has not been signed by the botnet master")
 
+
 def download_from_pastebot(fn):
     # "Download" the file from pastebot.net
     # (i.e. pretend we are and grab it from disk)
@@ -60,6 +66,7 @@ def download_from_pastebot(fn):
     f = open(os.path.join("pastebot.net", fn), "rb").read()
     process_file(fn, f)
 
+
 def p2p_download_file(sconn):
     # Download the file from the other bot
     fn = str(sconn.recv(), "ascii")
@@ -69,6 +76,7 @@ def p2p_download_file(sconn):
 
 ###
 
+
 def p2p_upload_file(sconn, fn):
     # Grab the file and upload it to the other bot
     # You don't need to encrypt it only files signed
@@ -81,6 +89,7 @@ def p2p_upload_file(sconn, fn):
     sconn.send(fn)
     sconn.send(filestore[fn])
 
+
 def run_file(f):
     # If the file can be run,
     # run the commands
diff --git a/lib/helpers.py b/lib/helpers.py
index 7385ad3..80a8eb3 100644
--- a/lib/helpers.py
+++ b/lib/helpers.py
@@ -3,12 +3,14 @@
 import random
 import string
 
+
 def read_hex(data):
     # Remove any spaces or newlines
     data = data.replace(" ", "").replace("\n", "")
     # Read the value as an integer from base 16 (hex)
     return int(data, 16)
 
+
 def generate_random_string(alphabet=None, length=8, exact=False):
     if not alphabet:
         alphabet = string.ascii_letters + string.digits
diff --git a/lib/p2p.py b/lib/p2p.py
index 55a22bf..36f39f6 100644
--- a/lib/p2p.py
+++ b/lib/p2p.py
@@ -8,6 +8,7 @@ from lib.files import p2p_download_file
 # This is primarily so we don't try to talk to ourselves
 server_port = 1337
 
+
 def find_bot():
     print("Finding another bot...")
     port = 1337
@@ -16,26 +17,31 @@ def find_bot():
         if port == server_port:
             # Don't connect to yourself, silly bot!
             port += 1
+
         else:
             try:
                 print("Found bot on port %d" % port)
-                conn.connect(("localhost", port))
+                conn.connect(("127.0.0.1", port))
+                print("In client")
                 sconn = StealthConn(conn, client=True)
                 return sconn
             except socket.error:
                 print("No bot was listening on port %d" % port)
                 port += 1
 
+
 def echo_server(sconn):
     while 1:
         data = sconn.recv()
         print("ECHOING>", data)
+        sconn.verbose = True
         sconn.send(data)
         if data == b'X' or data == b'exit':
             print("Closing connection...")
             sconn.close()
             return
 
+
 def accept_connection(conn):
     try:
         sconn = StealthConn(conn, server=True)
@@ -43,11 +49,13 @@ def accept_connection(conn):
         cmd = sconn.recv()
         if cmd == b'ECHO':
             echo_server(sconn)
+            print("In echo server");
         elif cmd == b'FILE':
             p2p_download_file(sconn)
     except socket.error:
         print("Connection closed unexpectedly")
 
+
 def bot_server():
     global server_port
     # Every bot is both client & server, so needs to listen for
@@ -58,7 +66,7 @@ def bot_server():
     # so if something else is using 1337, we'll keep going up.
     while True:
         try:
-            s.bind(("localhost", server_port))
+            s.bind(("127.0.0.1", server_port))
             print("Listening on port %d" % server_port)
             break
         except socket.error:
